package {		/*		Ronan Reilly, DL131,		3rd Year Computing in Multimedia Programming,		Multimedia Programming II,		CA 1, Conways Game of Life,		November 2011			*/		/*		CLASS DESCRIPTION BELOW:			This class will be used to import the world class create a new world.		there will be several fucntions in this class, an initButtons function		that initialises the instances of buttons used, and addEventListeners 		function that handles the event listeners for this class, the there is		a function for each button in the class. 			*/	// importing all the classes from the mmp.gol package.	import mmp.gol.*;		// imports needed to implement this class.	import flash.display.MovieClip;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.events.TimerEvent;	import flash.utils.Timer;	import fl.controls.Button;	import flash.utils.Timer;	public class Main extends MovieClip {		private var myWorld:World; // variable for a reference to a world object		// These variables will be used for the		// clear, random, start and stop buttons.		private var clear_btn:MovieClip; 		private var random_btn:MovieClip;		private var start_btn:MovieClip;		private var stop_btn:MovieClip;				// These variables will be used for the		// preset buttons to load preset patterns in to		// the world grid.		private var preset_1_btn:MovieClip;		private var preset_2_btn:MovieClip;		private var preset_3_btn:MovieClip;		private var preset_4_btn:MovieClip;				// This variable will be used to store the timer object.		private var _timer:Timer;		public function Main() {			//trace('Main document class is running!');						// Initiating the new world object.			myWorld = new World();			// Adding the world object to the stage.			addChild(myWorld);			// Positioning the world object on the stage.			//myWorld.y+=10;			myWorld.x+=40;			myWorld.y+=7;			// This method handles the initiating of buttons			// and is called here for when the movie is published.			initButtons();			// This method handles the event listeners for this class			// and is called here for when the movie is published.			addTheEventListeners();			// The trace statements commented out below trace various given positions			// in the grid to ensure that the check neighbours alive method from the World class			// is working correctly.			// --> Checking: Traces are Checking neighbours alive for each corner of the grid			// --> Result: Returns correct amount of alive neighbours			/*			trace(myWorld.countNeighboursAlive(0,0));			trace(myWorld.countNeighboursAlive(29,0));			trace(myWorld.countNeighboursAlive(0,29));			trace(myWorld.countNeighboursAlive(29,29));			*/			// --> Checking: Traces are checking neighbours alive for various positions along four edge rows of grid			// --> Result: Returns correct amount of alive neighbours			/*			trace(myWorld.countNeighboursAlive(2,0));			trace(myWorld.countNeighboursAlive(0,4));			trace(myWorld.countNeighboursAlive(2,29));			trace(myWorld.countNeighboursAlive(29,4));			*/			// --> Checking: Traces are checking neighbours alive for various positionsn whitin the middle of the grid			// --> Result: Returns correct amount of alive neighbours			/*			trace(myWorld.countNeighboursAlive(1,1));			trace(myWorld.countNeighboursAlive(8,1));			trace(myWorld.countNeighboursAlive(1,8));			trace(myWorld.countNeighboursAlive(8,8));			*/		}		public function initButtons():void {						//trace('Buttons have been initiated in the main class!');						// Creating new instances from the myButton in the library.			clear_btn = new myButton();			random_btn = new myButton();			start_btn = new myButton();			stop_btn = new myButton();			// Creating new instances from the myButton_2 in the library.			preset_1_btn = new myButton_2();			preset_2_btn = new myButton_2();			preset_3_btn = new myButton_2();			preset_4_btn = new myButton_2();			//makes movieclip behave like a button			clear_btn.buttonMode=true;			random_btn.buttonMode=true;			start_btn.buttonMode=true;			stop_btn.buttonMode=true;						//makes movieclip behave like a button			preset_1_btn.buttonMode=true;			preset_2_btn.buttonMode=true;			preset_3_btn.buttonMode=true;			preset_4_btn.buttonMode=true;			//storing textfield in bT1, creates linkage to a variable			var bt1:TextField=TextField(clear_btn.getChildByName("btnTxt"));			var bt2:TextField=TextField(random_btn.getChildByName("btnTxt"));			var bt3:TextField=TextField(start_btn.getChildByName("btnTxt"));			var bt4:TextField=TextField(stop_btn.getChildByName("btnTxt"));			var bt5:TextField=TextField(preset_1_btn.getChildByName("btnTxt"));			var bt6:TextField=TextField(preset_2_btn.getChildByName("btnTxt"));			var bt7:TextField=TextField(preset_3_btn.getChildByName("btnTxt"));			var bt8:TextField=TextField(preset_4_btn.getChildByName("btnTxt"));			//assign the text to the textfield			bt1.text="Clear";			bt2.text="Random";			bt3.text="Start";			bt4.text="Stop";			bt5.text="P1";			bt6.text="P2";			bt7.text="P3";			bt8.text="P4";			//this disallows the user to be able to highlight, cut and paste the button text			bt1.mouseEnabled=false;			bt2.mouseEnabled=false;			bt3.mouseEnabled=false;			bt4.mouseEnabled=false;			bt5.mouseEnabled=false;			bt6.mouseEnabled=false;			bt7.mouseEnabled=false;			bt8.mouseEnabled=false;			// Positioning the buttons on the stage			clear_btn.x=658;			clear_btn.y=140;			random_btn.x=658;			random_btn.y=200;			start_btn.x=658;			start_btn.y=260;			stop_btn.x=658;			stop_btn.y=320;			preset_1_btn.x=567;			preset_1_btn.y=408;			preset_2_btn.x=627;			preset_2_btn.y=408;			preset_3_btn.x=687;			preset_3_btn.y=408;			preset_4_btn.x=747;			preset_4_btn.y=408;			// Adding the buttons to the stage.				addChild(clear_btn);			addChild(random_btn);			addChild(start_btn);			addChild(stop_btn);			addChild(preset_1_btn);			addChild(preset_2_btn);			addChild(preset_3_btn);			addChild(preset_4_btn);		}		/*			This method handles all of the event listeners for this class			and is called from the constructor.		*/		public function addTheEventListeners():void {						//trace('Event listeners in the mainclass are ready to be used');						clear_btn.addEventListener(MouseEvent.CLICK, clearWorld, false, 0, true);			random_btn.addEventListener(MouseEvent.CLICK, randomiseWorld, false, 0, true);			start_btn.addEventListener(MouseEvent.CLICK, startWorldAutomation, false, 0, true);			stop_btn.addEventListener(MouseEvent.CLICK, stopWorldAutomation, false, 0, true);			preset_1_btn.addEventListener(MouseEvent.CLICK, loadPresetInvaders, false, 0, true);			preset_2_btn.addEventListener(MouseEvent.CLICK, loadPresetGhosts, false, 0, true);			preset_3_btn.addEventListener(MouseEvent.CLICK, loadPresetStarstruck, false, 0, true);			preset_4_btn.addEventListener(MouseEvent.CLICK, loadPresetFlowers, false, 0, true);			_timer=new Timer(100);			_timer.addEventListener(TimerEvent.TIMER, onTick);		}		/*			This method is called when the user hits the start button, it calls the			start automation method from the world class and updates the generation keeper			text field.		*/		private function onTick(evt:TimerEvent ):void {			//trace('On tick has been called in the main class');			myWorld.startAutomation();			generationKeeper.text='Generation: '+myWorld.generation.toString();		}				/*			This method is called when the user hits the clear button, it calls the			reset world method from the world class and updates the generation keeper			text field.		*/		public function clearWorld(evt:MouseEvent):void {			//trace('Clear world has been called in the main class');			myWorld.resetWorld();			generationKeeper.text='Generation: '+myWorld.generation.toString();		}				/*			This method is called when the user hits the random button, it calls the			create random world method from the world class and updates the generation keeper			text field.		*/		public function randomiseWorld(evt:MouseEvent):void {			//trace('randomise has been called in the main class');			myWorld.createRandomWorld();		}				/*			This method is called when the user hits the start button, it starts the			the timer ticking down.		*/		public function startWorldAutomation(evt:MouseEvent):void {			//trace('start world automation has been called in the main class');			_timer.start();		}		/*			This method is called when the user hits the stop button, and it stops the			the timer ticking down.		*/		public function stopWorldAutomation(evt:MouseEvent):void {			//trace('stop world automation has been called in the main class');			_timer.stop();		}						/*			This four methods below are attached to the load presets buttons and call the 			loadMyPresets functions from the world class whichb populates teh 			grid in the world with patterns from the presets class.		*/		private function loadPresetInvaders(evt:MouseEvent):void {			//trace('loadPresetInvaders has been called in the main class');			myWorld.generation = 0;			myWorld.loadMyPresets(Presets.INVADERS);		}		private function loadPresetGhosts(evt:MouseEvent):void {			//trace('loadPresetGhosts has been called in the main class');			myWorld.generation = 0;			myWorld.loadMyPresets(Presets.GHOSTS);		}		private function loadPresetStarstruck(evt:MouseEvent):void {			//trace('loadPresetStarstruck has been called in the main class');			myWorld.generation = 0;			myWorld.loadMyPresets(Presets.STARSTRUCK);		}		private function loadPresetFlowers(evt:MouseEvent):void {			//trace('loadPresetFlowers has been called in the main class');			myWorld.generation = 0;			myWorld.loadMyPresets(Presets.FLOWERS);		}	}}