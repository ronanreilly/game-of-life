package mmp.gol {		/*		Ronan Reilly, DL131,		3rd Year Computing in Multimedia Programming,		Multimedia Programming II,		CA 1, Conways Game of Life,		November 2011			*/		/*		CLASS DESCRIPTION BELOW:			This class will be used to draw tiles for the worlds grid,		handle the ability for a user to set a tiles status and 		getters and setters for the status of a tile and the neighbours		alive.			*/		// Imports needed to implement this class.	import flash.display.MovieClip;	import flash.display.Graphics;	import flash.events.*;		public class Tile extends MovieClip{				private var _status:int; // tell us if tile is alive or dead		private var _size:int=10; // size of the tile		private var _nextStatus:int; // next status of tile		private var _neighboursAlive:int; // number of tiles alive around a given tile				// These variables are constants beacause we 		// do not want them to change ever.				private static const DEAD:int=0; // constant for a dead tile set to 0		private static const ALIVE:int=1; // constant for a live tile  set to 1								public function Tile() {						// trace('Tile class is up and running!')			_status = DEAD;						// This sets the button mode for a tile to true			// so that a user can set the status of a tile to 			// dead or alive.			buttonMode = true;			// The draw method id called so that tiles can be created from the 			// world class.			draw();			// Here the onLoop event listener is called so that the tiles will be drawn when			// a world is created in the main method.			this.addEventListener(Event.ENTER_FRAME, onLoop, false, 0, true);			// This is the event handler for the on Over method.			this.addEventListener(MouseEvent.MOUSE_OVER, onOver, false, 0, true);			// This is the event handler for the onClick method which handles the users 			// ability of a user to set the status of a tile to dead or alive.			this.addEventListener(MouseEvent.CLICK, onClick, false, 0, true);					}				/*			The draw method checks the status of			a tile to see if it is dead or alive 			and then draws the tile and its colour			according to its status. 			*/		public function draw():void{			//trace('The draw method from the tile class has been called.');			graphics.clear();			// check to see if tile is alive			if (this.status == ALIVE)			{				graphics.lineStyle(1, 0xfbff31);				graphics.beginFill(0x97ff10);			}// if the tile is not alive the the below code is carried out.			else			{				graphics.lineStyle(1, 0x2e7400);				graphics.beginFill(0x666666);			}				graphics.drawRect(0,0, _size, _size);				graphics.endFill();			}					/*			The onLoop function is called when the 			flash movie is published allowing for			the tiles to drawn depending on their status. 			*/			public function onLoop(e:Event):void			{				draw();			}					/*			The onOver function prints the status of a tile			to a text field when it is hovered over. 			*/			public function onOver (e:MouseEvent):void			{				//trace('OnOver from the tile class is been used!');				e.target.parent.parent.info_txt.text =	"Status: ";				e.target.parent.parent.info_txt.appendText(_status);			}				/*			The onClick function checks to see if a tile that 			a user clicks is alive and sets it to dead if this is			true. If the tile the user selects id dead the on clicked it			will be set to alive instead.		*/			public function onClick (e:MouseEvent):void		{			//trace('OnClick from the tile class is been used!');			if (this.status == ALIVE)			{				//trace('tiles status has been changed to dead!');				this.status = DEAD;			}			else			{				//trace('tiles status has been changed to alive!');				this.status = ALIVE;			}		}								// This is a setter accessing the private variable		// call it  -->> mytile.status = 5;		public function set status(theStatus:int)		{				_status = theStatus;		}				// getter for status		// trace(myTile._status)		public function get status():int		{				return _status;		}					// This is a setter accessing the private variable		// call it  -->> mytile.status =5;		public function set nextStatus(nxtStatus:int)		{				_nextStatus = nxtStatus;		}				// getter for status		// trace(myTile._status)		public function get nextStatus():int		{				return _nextStatus;		}					// This is a setter accessing the private variable		// call it  -->> mytile.status =5;		public function set neighboursAlive(nbAlive:int)		{				_neighboursAlive = nbAlive;		}				// getter for status		// trace(myTile._status)		public function get neighboursAlive():int		{				return _neighboursAlive;		}	}	}